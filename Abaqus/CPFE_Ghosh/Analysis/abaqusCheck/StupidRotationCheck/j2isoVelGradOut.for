C     ***************************************************************
C     THIS SUBROUTINE IS FOR CALCULATION AND OUTPUT 
C     OF VELOCITY GRADIENT FROM DEFORMATION GRADIENT
C     DURING AN IMPLICIT FEM SIMULATION OF DEFORMATION
C     OF A J2 MATERIAL WITH ISOTROPIC ELASTOPLASTIC BEHAVIOR
C
C     THE MAIN PURPOSE OF THE SUBROUTINE 
C     IS TO PROVIDE FE DEFORMATION HISTORY
C     FOR VPSC SIMULATIONS
C
C     CALCULATION OF VELOCITY GRADIENT 
C     IS IMPLEMENTED BY MARAT LATYPOV AT POSTECH
C     CALCULATION IS BASED ON Li et al. Acta Mater. 52 (2004) 4859-4875
C
C     MOST PARTS OF UMAT AND WHOLE UHARD ARE 
C     TAKEN FROM 'WRITING USER SUBROUTINES WITH ABAQUS' 
C
C     CALCULATION OF VELOCITY GRADIENT UTILIZES SOME SUBROUTINES
C     ADOPTED FROM KALIDINDI CPFEM 
C		UMAT-1992 (Kalidindi, PhD thesis, MIT, 1992, Cambridge)
C
C     LAST CHANGE: AUGUST 31, 2014
C     CONTACT: latmarat@postech.edu
C     ***************************************************************

      SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,
     1 RPL,DDSDDT,DRPLDE,DRPLDT,STRAN,DSTRAN,
     2 TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,MATERL,NDI,NSHR,NTENS,
     3 NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,CELENT,
     4 DFGRD0,DFGRD1,NOEL,NPT,KSLAY,KSPT,KSTEP,KINC)
     
C --  UMAT FOR ISOTROPIC ELASTICITY AND ISOTROPIC PLASTICITY
C --  J2 FLOW THEORY
C --  CAN NOT BE USED FOR PLANE STRESS
C --  PROPS(1) - E
C --  PROPS(2) - NU
C --  PROPS(3) - SYIELD
C --  CALLS AHARD FOR CURVE OF SYIELD VS. PEEQ

      INCLUDE 'ABA_PARAM.INC'

      CHARACTER*80 MATERL
      DIMENSION STRESS(NTENS),STATEV(NSTATV),
     1 DDSDDE(NTENS,NTENS),DDSDDT(NTENS),DRPLDE(NTENS),
     2 STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),
     3 PROPS(NPROPS),COORDS(3),DROT(3,3),
     4 DFGRD0(3,3),DFGRD1(3,3)

      DIMENSION EELAS(6),EPLAS(6),FLOW(6)
C      
C     ARRAYS FOR CALCULATION OF VELGRAD      
C
      DIMENSION FTINV(3,3),STRATE(3,3),VELGRD(3,3),AUX1(3,3),ONEMAT(3,3)
      
      PARAMETER (ONE=1.0D0,TWO=2.0D0,THREE=3.0D0,SIX=6.0D0)
      DATA NEWTON,TOLER/10,1.D-6/

      IF (NDI.NE.3) THEN
        WRITE(6,1)
 1      FORMAT(//,30X,'***ERROR - THIS UMAT MAY ONLY BE USED FOR ',
     1          'ELEMENTS WITH THREE DIRECT STRESS COMPONENTS')
      ENDIF
C
C     ELASTIC PROPERTIES
C
      EMOD=PROPS(1)
      ENU=PROPS(2)
      IF (ENU.GT.0.4999.AND.ENU.LT.0.5001) ENU=0.499
      EBULK3=EMOD/(ONE-TWO*ENU)
      EG2=EMOD/(ONE+ENU)
      EG=EG2/TWO
      EG3=THREE*EG
      ELAM=(EBULK3-EG2)/THREE
C
C     ELASTIC STIFFNESS
C
      DO 20 K1=1,NTENS
        DO 10 K2=1,NTENS
           DDSDDE(K2,K1)=0.0
 10     CONTINUE
 20   CONTINUE
C
      DO 40 K1=1,NDI
        DO 30 K2=1,NDI
           DDSDDE(K2,K1)=ELAM
 30     CONTINUE
        DDSDDE(K1,K1)=EG2+ELAM
 40   CONTINUE
      DO 50 K1=NDI+1,NTENS
        DDSDDE(K1,K1)=EG
 50   CONTINUE
C
C     CALCULATE STRESS FROM ELASTIC STRAINS
C
      DO 70 K1=1,NTENS
        DO 60 K2=1,NTENS
           STRESS(K2)=STRESS(K2)+DDSDDE(K2,K1)*DSTRAN(K1)
 60     CONTINUE
 70   CONTINUE
C
C     RECOVER ELASTIC AND PLASTIC STRAINS
C
      DO 80 K1=1,NTENS
         EELAS(K1)=STATEV(K1)+DSTRAN(K1)
         EPLAS(K1)=STATEV(K1+NTENS)
 80   CONTINUE
      EQPLAS=STATEV(1+2*NTENS)
C
C     IF NO YIELD STRESS IS GIVEN, MATERIAL IS TAKEN TO BE ELASTIC
C
      IF (NPROPS.GT.2.AND.PROPS(3).GT.0.0) THEN
C
C       MISES STRESS
C
        SMISES=(STRESS(1)-STRESS(2))*(STRESS(1)-STRESS(2)) +
     1          (STRESS(2)-STRESS(3))*(STRESS(2)-STRESS(3)) +
     1          (STRESS(3)-STRESS(1))*(STRESS(3)-STRESS(1))
        DO 90 K1=NDI+1,NTENS
            SMISES=SMISES+SIX*STRESS(K1)*STRESS(K1)
 90     CONTINUE
        SMISES=SQRT(SMISES/TWO)
C
C       HARDENING CURVE, GET YIELD STRESS
C
        NVALUE=NPROPS/2-1
        CALL UHARD(SYIEL0,HARD,EQPLAS,PROPS(3),NVALUE)
C
C       DETERMINE IF ACTIVELY YIELDING
C
        IF (SMISES.GT.(1.0+TOLER)*SYIEL0) THEN
C
C         FLOW DIRECTION
C
          SHYDRO=(STRESS(1)+STRESS(2)+STRESS(3))/THREE
          ONESY=ONE/SMISES
          DO 110 K1=1,NDI
             FLOW(K1)=ONESY*(STRESS(K1)-SHYDRO)
 110      CONTINUE
          DO 120 K1=NDI+1,NTENS
             FLOW(K1)=STRESS(K1)*ONESY
 120      CONTINUE
C
C       SOLVE FOR EQUIV STRESS, NEWTON ITERATION
C
          SYIELD=SYIEL0
          DEQPL=0.0
          DO 130 KEWTON=1,NEWTON
             RHS=SMISES-EG3*DEQPL-SYIELD
             DEQPL=DEQPL+RHS/(EG3+HARD)
             CALL UHARD(SYIELD,HARD,EQPLAS+DEQPL,PROPS(3),NVALUE)
             IF (ABS(RHS).LT.TOLER*SYIEL0) GOTO 140
 130      CONTINUE
          WRITE(6,2) NEWTON
 2        FORMAT(//,30X,'***WARNING - PLASTICITY ALGORITHM DID NOT ',
     1        'CONVERGE AFTER ',I3,' ITERATIONS')
 140      CONTINUE
          EFFHRD=EG3*HARD/(EG3+HARD)
C
C         CALC STRESS AND UPDATE STRAINS
C
          DO 150 K1=1,NDI
             STRESS(K1)=FLOW(K1)*SYIELD+SHYDRO
             EPLAS(K1)=EPLAS(K1)+THREE*FLOW(K1)*DEQPL/TWO
             EELAS(K1)=EELAS(K1)-THREE*FLOW(K1)*DEQPL/TWO
 150      CONTINUE
          DO 160 K1=NDI+1,NTENS
             STRESS(K1)=FLOW(K1)*SYIELD
             EPLAS(K1)=EPLAS(K1)+THREE*FLOW(K1)*DEQPL
             EELAS(K1)=EELAS(K1)-THREE*FLOW(K1)*DEQPL
 160      CONTINUE
          EQPLAS=EQPLAS+DEQPL
          SPD=DEQPL*(SYIEL0+SYIELD)/TWO
C
C         JACOBIAN
C
          EFFG=EG*SYIELD/SMISES
          EFFG2=TWO*EFFG
          EFFG3=THREE*EFFG2/TWO
          EFFLAM=(EBULK3-EFFG2)/THREE
          DO 220 K1=1,NDI
             DO 210 K2=1,NDI
                DDSDDE(K2,K1)=EFFLAM
 210         CONTINUE
             DDSDDE(K1,K1)=EFFG2+EFFLAM
 220      CONTINUE
          DO 230 K1=NDI+1,NTENS
             DDSDDE(K1,K1)=EFFG
 230      CONTINUE
          DO 250 K1=1,NTENS
             DO 240 K2=1,NTENS
                DDSDDE(K2,K1)=DDSDDE(K2,K1)+FLOW(K2)*FLOW(K1)
     1                                       *(EFFHRD-EFFG3)
 240         CONTINUE
 250      CONTINUE
        ENDIF
      ENDIF
C
C     STORE STRAINS IN STATE VARIABLE ARRAY
C
      DO 310 K1=1,NTENS
        STATEV(K1)=EELAS(K1)
        STATEV(K1+NTENS)=EPLAS(K1)
 310  CONTINUE
      STATEV(1+2*NTENS)=EQPLAS
C
C     CALCULATE VELOCITY GRADIENT FROM DEFORMATION GRADIENT.
C     REFERENCE: Li & al. Acta Mater. 52 (2004) 4859-4875
C     
      CALL ONEM(ONEMAT)     
	CALL ZEROM(FTINV)
	CALL ZEROM(AUX1)
	CALL ZEROM(VELGRD)
	CALL ZEROM(STRATE)
	  
      CALL M3INV(DFGRD0,FTINV)
      CALL MPROD(DFGRD1,FTINV,AUX1)
      DO 231 I=1,3
        DO 231 J=1,3
          VELGRD(I,J) = (AUX1(I,J)-ONEMAT(I,J))/DTIME
          STRATE(I,J) = 0.5*(VELGRD(I,J)+VELGRD(J,I))
231   CONTINUE
C
C     STORE VEL.GRAD. COMPONENTS TO SDV
C
      STATEV(14) = VELGRD(1,1)
      STATEV(15) = VELGRD(1,2)
      STATEV(16) = VELGRD(1,3)
      STATEV(17) = VELGRD(2,1)
      STATEV(18) = VELGRD(2,2)
      STATEV(19) = VELGRD(2,3)
      STATEV(20) = VELGRD(3,1)
      STATEV(21) = VELGRD(3,2)
      STATEV(22) = VELGRD(3,3)   

      RETURN
      END
C     END OF SUBROUTINE UMAT
C     -------------------------------------------------

      SUBROUTINE UHARD(SYIELD,HARD,EQPLAS,TABLE,NVALUE)
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION TABLE(2,NVALUE)
C
C    SET YIELD STRESS TO LAST VALUE OF TABLE, HARDENING TO ZERO
      SYIELD=TABLE(1,NVALUE)
      HARD=0.0
C
C   IF MORE THAN ONE ENTRY, SEARCH TABLE
C
      IF(NVALUE.GT.1) THEN
        DO 10 K1=1,NVALUE-1
           EQPL1=TABLE(2,K1+1)
           IF(EQPLAS.LT.EQPL1) THEN
             EQPL0=TABLE(2,K1)
             IF(EQPL1.LE.EQPL0) THEN
                WRITE(6,1)
 1              FORMAT(//,30X,'***ERROR - PLASTIC STRAIN MUST BE ',
     1                 'ENTERED IN ASCENDING ORDER')
                CALL XIT
              ENDIF
C
C           CURRENT YIELD STRESS AND HARDENING
C
            DEQPL=EQPL1-EQPL0
            SYIEL0=TABLE(1,K1)
            SYIEL1=TABLE(1,K1+1)
            DSYIEL=SYIEL1-SYIEL0
            HARD=DSYIEL/DEQPL
            SYIELD=SYIEL0+(EQPLAS-EQPL0)*HARD
            GOTO 20
            ENDIF
 10         CONTINUE
 20         CONTINUE
      ENDIF
      RETURN
      END

C     END OF SUBROUTINE UHARD
C     ---------------------------------------------------------------


C     ***************************************************************
C     UTILITY SUBROUTINES TAKEN FROM KALIDINDI CPFEM UMAT-1992
C     Kalidindi, PhD thesis, MIT, 1992, Cambridge
C     ***************************************************************


     	SUBROUTINE ZEROM(A)
C --  THIS SUBROUTINE SETS ALL ENTRIES OF A 3 BY 3 MATRIX TO 0.0

	IMPLICIT REAL*8(A-H,O-Z)
      REAL*8 A(3,3)

      DO 1 I=1,3
        DO 1 J=1,3
             A(I,J) = 0.0
1	CONTINUE
	
	RETURN
	END
C     END OF SUBROUTINE ZEROM	
C     ---------------------------------------------------------------


	SUBROUTINE ONEM(A)
C --	THIS SUBROUTINE STORES THE IDENTITY MATRIX IN 
C --  THE 3 BY 3 MATRIX [A]

	IMPLICIT REAL*8(A-H,O-Z)
      REAL*8 A(3,3)

	DO 1 I = 1,3
	  DO 1 J = 1,3
	    IF (I .EQ. J) THEN      
	      A(I,J)      = 1.0D0
	      ELSE
	        A(I,J)      = 0.0D0
	    END IF
1	CONTINUE

	RETURN
	END
C     END OF SUBROUTINE ONEM	
C     ---------------------------------------------------------------


	SUBROUTINE MPROD(A,B,C)
C --	THIS SUBROUTINE MULTIPLIES TWO 3 BY 3 MATRICES [A] AND [B],
C --	AND PLACE THEIR PRODUCT IN MATRIX [C]. 

	IMPLICIT REAL*8(A-H,O-Z)
	REAL*8 A(3,3), B(3,3), C(3,3)

	DO 2 I = 1, 3
	  DO 2 J = 1, 3
		  C(I,J) = 0.0
		  DO 1 K = 1, 3
			C(I,J) = C(I,J) + A(I,K) * B(K,J)                       
1		CONTINUE
2	CONTINUE
	RETURN
	END
C     END OF SUBROUTINE MPROD	
C -----------------------------------------------------------------


	SUBROUTINE MTRANS(A,ATRANS)
C --	THIS SUBROUTINE CALCULATES THE TRANSPOSE OF AN 3 BY 3 
C --	MATRIX [A], AND PLACES THE RESULT IN ATRANS. 

	IMPLICIT REAL*8(A-H,O-Z)
	REAL*8  A(3,3), ATRANS(3,3)

      CALL ONEM(ATRANS)
	DO 1 I = 1, 3
      	DO 1 J = 1, 3
		  ATRANS(I,J) = A(J,I)
1	CONTINUE
	RETURN
	END
C     END OF SUBROUTINE MTRANS	
C -----------------------------------------------------------------


	SUBROUTINE MDET(A,DET)
C --	THIS SUBROUTINE CALCULATES THE DETERMINANT
C --	OF A 3 BY 3 MATRIX [A].

	IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION A(3,3)

	DET =	  A(1,1)*A(2,2)*A(3,3) 
     +	+ A(1,2)*A(2,3)*A(3,1)
     +	+ A(1,3)*A(2,1)*A(3,2)
     +	- A(3,1)*A(2,2)*A(1,3)
     +	- A(3,2)*A(2,3)*A(1,1)
     +	- A(3,3)*A(2,1)*A(1,2)

	RETURN
	END
C     END OF SUBROUTINE MDET	
C -----------------------------------------------------------------

	SUBROUTINE M3INV(A,AINV)
C --	THIS SUBROUTINE CALCULATES THE THE INVERSE OF A 3 BY 3 MATRIX [A]
C --	AND PLACES THE RESULT IN [AINV]. 
C --	IF DET(A) IS ZERO, THE CALCULATION
C --	IS TERMINATED AND A DIAGNOSTIC STATEMENT IS PRINTED.

	IMPLICIT REAL*8(A-H,O-Z)	
	REAL*8  A(3,3), AINV(3,3), DET, ACOFAC(3,3), AADJ(3,3)
C
C		A(3,3)	-- THE MATRIX WHOSE INVERSE IS DESIRED.
C		DET		-- THE COMPUTED DETERMINANT OF [A].
C		ACOFAC(3,3)	-- THE MATRIX OF COFACTORS OF A(I,J).
C				   THE SIGNED MINOR (-1)**(I+J)*M_IJ
C				   IS CALLED THE COFACTOR OF A(I,J).
C		AADJ(3,3)	-- THE ADJOINT OF [A]. IT IS THE MATRIX
C				   OBTAINED BY REPLACING EACH ELEMENT OF
C				   [A] BY ITS COFACTOR, AND THEN TAKING
C				   TRANSPOSE OF THE RESULTING MATRIX.
C		AINV(3,3)	-- RETURNED AS INVERSE OF [A].
C				   [AINV] = [AADJ]/DET.

	CALL MDET(A,DET)

	IF ( DET .EQ. 0.0 ) THEN
	    WRITE(91,10)
	    CALL XIT
	END IF

	CALL MCOFAC(A,ACOFAC)
	CALL MTRANS(ACOFAC,AADJ)
	DO 1 I = 1,3
	DO 1 J = 1,3
	     AINV(I,J) = AADJ(I,J)/DET
1	CONTINUE

C	FORMAT
 10	FORMAT(5X,'--ERROR IN M3INV--- THE MATRIX IS SINGULAR',/,
     +       10X,'PROGRAM TERMINATED')

	RETURN
	END
C     END OF SUBROUTINE M3INV	
C -----------------------------------------------------------------


	SUBROUTINE MCOFAC(A,ACOFAC)
C --	THIS SUBROUTINE CALCULATES THE COFACTOR OF A 3 BY 3 MATRIX [A],
C --	AND PLACES THE RESULT IN ACOFAC. 

	IMPLICIT REAL*8(A-H,O-Z)
	REAL*8  A(3,3), ACOFAC(3,3)

	ACOFAC(1,1) = A(2,2)*A(3,3) - A(3,2)*A(2,3)
	ACOFAC(1,2) = -(A(2,1)*A(3,3) - A(3,1)*A(2,3))
	ACOFAC(1,3) = A(2,1)*A(3,2) - A(3,1)*A(2,2)
	ACOFAC(2,1) = -(A(1,2)*A(3,3) - A(3,2)*A(1,3))
	ACOFAC(2,2) = A(1,1)*A(3,3) - A(3,1)*A(1,3)
	ACOFAC(2,3) = -(A(1,1)*A(3,2) - A(3,1)*A(1,2))
	ACOFAC(3,1) = A(1,2)*A(2,3)  - A(2,2)*A(1,3)
	ACOFAC(3,2) = -(A(1,1)*A(2,3) - A(2,1)*A(1,3))
	ACOFAC(3,3) = A(1,1)*A(2,2) - A(2,1)*A(1,2)

	RETURN
	END
C     END OF SUBROUTINE MCOFAC	
C -----------------------------------------------------------------